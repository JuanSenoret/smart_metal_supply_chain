pragma solidity ^0.5.0;
// Import the library 'Roles'
import "../aluminumcore/Ownable.sol";
import "../aluminumaccesscontrol/AluminumProducerRole.sol";
import "../aluminumaccesscontrol/DistributorRole.sol";
import "../aluminumaccesscontrol/AutoManufacturerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, AluminumProducerRole, DistributorRole, AutoManufacturerRole {
    // Define 'owner'
    //address owner;
    // Define a variable called 'dna' for the metal signature (DNA)
    uint dna;
    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint sku;
    // Define a public mapping 'items' that maps the DNA signature to an Item.
    mapping (uint => Item) items;
    // Define a public mapping 'itemsHistory' that maps the ADN to an array of TxHash, 
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) itemsHistory;
    
    // Define enum 'State' with the following values:
    enum State 
    { 
      Collected,                // 0
      Processed,                // 1
      Packed,                   // 2
      ForSaleToDistributor,     // 3
      SoldToDistributor,        // 4
      ShippedToDistributor,     // 5
      ReceivedForDistributor,   // 6
      PurchasedForDistributor,  // 7
      ForSaleToManufacturer,    // 8
      SoldToManufacturer,       // 9
      ShippedToManufacturer,    // 10
      ReceivedForManufacturer,  // 11
      PurchasedForManufacturer  // 12
    }
    
    State constant defaultState = State.Collected;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint    sku;                                // Stock Keeping Unit (SKU)
        uint    dna;                                // Universal Product Code (UPC), generated by the Aluminum Producer, goes on the package, can be verified by the Auto Manufacturer
        bool    existItem;                          // Boolean to check the existence of the item easily
        address payable ownerID;                    // Metamask-Ethereum address of the current owner as the product moves through 12 stages
        address payable originAluminumProducerID;   // Metamask-Ethereum address of the Farmer
        string  originAluminumProducerName;         // Aluminum Producer Name
        string  originAluminumProducerInformation;  // Aluminum Producer Information
        string  originAluminumProducerLatitude;     // Aluminum Producer Latitude
        string  originAluminumProducerLongitude;    // Aluminum Producer Longitude
        uint    productID;                          // Product ID potentially a combination of dna + sku
        string  productNotes;                       // Product Notes
        uint    productPrice;                       // Product Price
        State   itemState;                          // Product State as represented in the enum above
        address payable distributorID;              // Metamask-Ethereum address of the Distributor
        address payable autoManufacturerID;         // Metamask-Ethereum address of the Auto Manufacturer
    }

    // Define 12 events with the same 12 state values and accept 'dna' as input argument
    event Collected(uint dna, address emiter);
    event Processed(uint dna, address emiter);
    event Packed(uint dna, address emiter);
    event ForSaleToDistributor(uint dna, address emiter, uint price);
    event SoldToDistributor(uint dna, address emiter);
    event ShippedToDistributor(uint dna, address emiter);
    event ReceivedForDistributor(uint dna, address emiter);
    event PurchasedForDistributor(uint dna, address emiter);
    event ForSaleToManufacturer(uint dna, address emiter, uint price);
    event SoldToManufacturer(uint dna, address emiter);
    event ShippedToManufacturer(uint dna, address emiter);
    event ReceivedForManufacturer(uint dna, address emiter);
    event PurchasedForManufacturer(uint dna, address emiter);

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable {
        //owner = msg.sender;
        sku = 1;
        dna = 1;
    }

    // Define a modifer that checks to see if msg.sender == owner of the contract
    // Already in Ownable contract
    /*
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    */

    // Define a modifer that verifies the Caller
    modifier verifyCaller (address _address) {
        require(
            msg.sender == _address,
            "Caller not authorized"
        ); 
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough (uint _price) { 
        require(
            msg.value >= _price,
            "Paid amount not sufficient"
        ); 
        _;
    }
  
    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue (uint _dna) {
        _;
        uint _price = items[_dna].productPrice;
        uint amountToReturn = msg.value - _price;
        msg.sender.transfer(amountToReturn);
        //items[_dna].autoManufacturerID.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier checkItemState (uint _dna, State _state, string memory _errorMessage) {
        require(items[_dna].itemState == _state, _errorMessage);
        _;
    }

    // Check if a _dna is already in the items mapping
    modifier checkDnaInItems (uint _dna) {
        require(items[_dna].existItem, "DNA doesn`t exist in items mapping");
        _;
    }

    // Define a function 'kill' if required
    function kill() public onlyOwner {
        selfdestruct(this.owner());
    }

    // Define a function 'collectItem' that allows a producer to mark an item 'Collected'
    // In this function we will create first the item
    function collectItem (
        uint _dna, 
        address payable _originAluminumProducerID, 
        string memory _originAluminumProducerName, 
        string memory _originAluminumProducerInformation, 
        string memory _originAluminumProducerLatitude, 
        string memory _originAluminumProducerLongitude, 
        string memory _productNotes) public onlyAluminumProducer() {
        // Add the new item as part of collect
        Item memory newItem = Item(
            sku, 
            _dna,
            true,
            _originAluminumProducerID, 
            _originAluminumProducerID,
            _originAluminumProducerName,
            _originAluminumProducerInformation, 
            _originAluminumProducerLatitude,
            _originAluminumProducerLongitude,
            _dna + sku,
            _productNotes,
            0,
            State.Collected,
            address(0),
            address(0));
        items[_dna] = newItem;

        // Increment sku
        sku = sku + 1;
        // Emit the appropriate event
        emit Collected(_dna, msg.sender);
    }

    // Define a function 'processtItem' that allows a producer to mark an item 'Processed'
    function processItem(uint _dna) public 
        onlyAluminumProducer()
        verifyCaller(items[_dna].ownerID) // Check if caller is the owner of the item
        checkDnaInItems (_dna)
        checkItemState (_dna, State.Collected, "Aluminum asset not collected.")
    {
      // Update the appropriate fields
      items[_dna].itemState = State.Processed;
    
      // Emit the appropriate event
      emit Processed(_dna, msg.sender);
    }

    // Define a function 'packItem' that allows a producer to mark an item 'Packed'
    function packItem(uint _dna) public
        onlyAluminumProducer()
        checkDnaInItems (_dna)
        verifyCaller(items[_dna].ownerID) // Check if caller is the owner of the item
        checkItemState (_dna, State.Processed, "Aluminum asset not processed.")
    {
        // Update the appropriate fields
        items[_dna].itemState = State.Packed;
    
        // Emit the appropriate event
        emit Packed(_dna, msg.sender);
    }

    // Define a function 'sellItem' that allows a producer to mark an item 'ForSaleToDistributor'
    function sellItemToDistributor(uint _dna, uint _price) public
        onlyAluminumProducer()
        checkDnaInItems (_dna)
        verifyCaller(items[_dna].ownerID) // Check if caller is the owner of the item
        checkItemState (_dna, State.Packed, "Aluminum asset not Packed.")
    {
        // Update the appropriate fields
        items[_dna].itemState = State.ForSaleToDistributor;
        items[_dna].productPrice = _price;
    
        // Emit the appropriate event
        emit ForSaleToDistributor(_dna, msg.sender, _price);
    }

    // Define a function 'buyItemDistributor' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
    // and any excess ether sent is refunded back to the buyer
    function buyItemDistributor(uint _dna) public payable 
        onlyDistributor()   // Check if caller is a distributor
        checkDnaInItems (_dna)  // check if the item dna exists in the supply chain
        checkItemState (_dna, State.ForSaleToDistributor, "Aluminum asset not ForSaleToDistributor.")   // Check if item dna has passed previous supply chain stage
        paidEnough(items[_dna].productPrice)    // Check if buyer has paid enough
        checkValue(_dna)    // Send any excess ether back to buyer
    {
    
        // Update the appropriate fields - ownerID, distributorID, itemState
        items[_dna].ownerID = msg.sender;
        items[_dna].distributorID = msg.sender;
        items[_dna].itemState = State.SoldToDistributor;
    
        // Transfer money to aluminum producer
        items[_dna].originAluminumProducerID.transfer(items[_dna].productPrice);
    
        // emit the appropriate event
        emit SoldToDistributor(_dna, msg.sender);
    }

    // Define a function 'shipItem' that allows the producer to mark an item 'Shipped'
    // Use the above modifers to check if the item is sold
    function shipItemDistributor(uint _dna) public 
        onlyAluminumProducer()  // Check if caller is a producer
        checkDnaInItems (_dna)  // check if the item dna exists in the supply chain
        verifyCaller(items[_dna].originAluminumProducerID) // Check if caller is the aluminum producer of the item
        checkItemState (_dna, State.SoldToDistributor, "Aluminum asset not SoldToDistributor.")   // Check if item dna has passed previous supply chain stage    
    {
        // Update the appropriate fields
        items[_dna].itemState = State.ShippedToDistributor;
    
        // emit the appropriate event
        emit ShippedToDistributor(_dna, msg.sender);
    }

    // Define a function 'receiveItemDistributor' that allows the distributor to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    function receiveItemDistributor(uint _dna) public 
        onlyDistributor()   // Check if caller is a distributor
        checkDnaInItems (_dna)  // check if the item dna exists in the supply chain
        verifyCaller(items[_dna].ownerID) // Check if caller is the owner of the item
        checkItemState (_dna, State.ShippedToDistributor, "Aluminum asset not ShippedToDistributor.")   // Check if item dna has passed previous supply chain stage
    {
        // Update the appropriate fields
        items[_dna].itemState = State.ReceivedForDistributor;
    
        // Emit the appropriate event
        emit ReceivedForDistributor(_dna, msg.sender);
    }

    // Define a function 'purchaseItemDistributor' that allows the distributor to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    function purchaseItemDistributor(uint _dna) public 
        onlyDistributor()   // Check if caller is a distributor
        checkDnaInItems (_dna)  // check if the item dna exists in the supply chain
        verifyCaller(items[_dna].ownerID) // Check if caller is the owner of the item
        checkItemState (_dna, State.ReceivedForDistributor, "Aluminum asset not ReceivedForDistributor.")   // Check if item dna has passed previous supply chain stage
    {
        // Update the appropriate fields
        items[_dna].itemState = State.PurchasedForDistributor;
    
        // Emit the appropriate event
        emit PurchasedForDistributor(_dna, msg.sender);
    }

    // Define a function 'sellItemToManufacturer' that allows a distributor to mark an item 'ForSaleToManufacturer'
    function sellItemToManufacturer(uint _dna, uint _price) public
        onlyDistributor()   // Check if caller is a distributor
        checkDnaInItems (_dna)  // check if the item dna exists in the supply chain
        verifyCaller(items[_dna].ownerID) // Check if caller is the owner of the item
        checkItemState (_dna, State.PurchasedForDistributor, "Aluminum asset not PurchasedForDistributor.") // Check if item dna has passed previous supply chain stage
    {
        // Update the appropriate fields
        items[_dna].itemState = State.ForSaleToManufacturer;
        items[_dna].productPrice = _price;
    
        // Emit the appropriate event
        emit ForSaleToManufacturer(_dna, msg.sender, _price);
    }

    // Define a function 'buyItemDistributor' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
    // and any excess ether sent is refunded back to the buyer
    function buyItemManufacturer(uint _dna) public payable 
        onlyAutoManufacturer()   // Check if caller is an auto manufacturer
        checkDnaInItems (_dna)  // check if the item dna exists in the supply chain
        checkItemState (_dna, State.ForSaleToManufacturer, "Aluminum asset not ForSaleToManufacturer.")   // Check if item dna has passed previous supply chain stage
        paidEnough(items[_dna].productPrice)    // Check if buyer has paid enough
        checkValue(_dna)    // Send any excess ether back to buyer
    {
    
        // Update the appropriate fields - ownerID, distributorID, itemState
        items[_dna].ownerID = msg.sender;
        items[_dna].autoManufacturerID = msg.sender;
        items[_dna].itemState = State.SoldToManufacturer;
    
        // Transfer money to distributor from auto manufacturer
        items[_dna].distributorID.transfer(items[_dna].productPrice);
    
        // emit the appropriate event
        emit SoldToManufacturer(_dna, msg.sender);
    }

    // Define a function 'shipItemManufacturer' that allows the distributor to mark an item 'Shipped'
    function shipItemManufacturer(uint _dna) public 
        onlyDistributor()  // Check if caller is a distributor
        checkDnaInItems (_dna)  // check if the item dna exists in the supply chain
        verifyCaller(items[_dna].distributorID) // Check if caller is the distributor of the item
        checkItemState (_dna, State.SoldToManufacturer, "Aluminum asset not SoldToManufacturer.")   // Check if item dna has passed previous supply chain stage    
    {
        // Update the appropriate fields
        items[_dna].itemState = State.ShippedToManufacturer;
    
        // emit the appropriate event
        emit ShippedToManufacturer(_dna, msg.sender);
    }

    // Define a function 'receiveItemManufacturer' that allows the auto manufacturer to mark an item 'Received'
    function receiveItemManufacturer(uint _dna) public 
        onlyAutoManufacturer()   // Check if caller is an auto manufacturer
        checkDnaInItems (_dna)  // check if the item dna exists in the supply chain
        verifyCaller(items[_dna].ownerID) // Check if caller is the owner of the item
        checkItemState (_dna, State.ShippedToManufacturer, "Aluminum asset not ShippedToManufacturer.")   // Check if item dna has passed previous supply chain stage
    {
        // Update the appropriate fields
        items[_dna].itemState = State.ReceivedForManufacturer;
    
        // Emit the appropriate event
        emit ReceivedForManufacturer(_dna, msg.sender);
    }

    // Define a function 'purchaseItemDistributor' that allows the distributor to mark an item 'Purchased'
    function purchaseItemManufacturer(uint _dna) public 
        onlyAutoManufacturer()   // Check if caller is an auto manufacturer
        checkDnaInItems (_dna)  // check if the item dna exists in the supply chain
        verifyCaller(items[_dna].ownerID) // Check if caller is the owner of the item
        checkItemState (_dna, State.ReceivedForManufacturer, "Aluminum asset not ReceivedForManufacturer.")   // Check if item dna has passed previous supply chain stage
    {
        // Update the appropriate fields
        items[_dna].itemState = State.PurchasedForManufacturer;
    
        // Emit the appropriate event
        emit PurchasedForManufacturer(_dna, msg.sender);
    }

    // Define a function 'fetchItemBufferOne' that fetches public data
    function fetchItemBufferPublic(uint _dna) public checkDnaInItems (_dna) view returns 
    (
        uint    itemSKU,
        uint    itemADN,
        address ownerID,
        address originAluminumProducerID,
        string  memory originAluminumProducerName,
        string  memory originAluminumProducerInformation,
        string  memory originAluminumProducerLatitude,
        string  memory originAluminumProducerLongitude,
        State    itemState,
        uint    productPrice,
        address distributorID
    )
    {
        // Assign values to the parameters
        Item memory itemFound = items[_dna];
        itemSKU = itemFound.sku;
        itemADN = itemFound.dna;
        ownerID = itemFound.ownerID;
        originAluminumProducerID = itemFound.originAluminumProducerID;
        originAluminumProducerName = itemFound.originAluminumProducerName;
        originAluminumProducerInformation = itemFound.originAluminumProducerInformation;
        originAluminumProducerLatitude = itemFound.originAluminumProducerLatitude;
        originAluminumProducerLongitude = itemFound.originAluminumProducerLongitude;
        itemState = itemFound.itemState;
        productPrice = itemFound.productPrice;
        distributorID = itemFound.distributorID;
    
        return 
        (
            itemSKU,
            itemADN,
            ownerID,
            originAluminumProducerID,
            originAluminumProducerName,
            originAluminumProducerInformation,
            originAluminumProducerLatitude,
            originAluminumProducerLongitude,
            itemState,
            productPrice,
            distributorID
        );
    }

    // Define a function 'fetchItemBuffetchItemBufferForDistributorferOne' that fetches data only for distributor
    function fetchItemBufferForDistributor(uint _dna) public checkDnaInItems (_dna) view returns
    (
        uint    itemSKU,
        uint    itemADN,
        address ownerID,
        address originAluminumProducerID,
        string  memory originAluminumProducerName,
        string  memory originAluminumProducerInformation,
        string  memory originAluminumProducerLatitude,
        string  memory originAluminumProducerLongitude,
        string  memory productNotes,
        State    itemState
    )
    {
        // Assign values to the parameters
        Item memory itemFound = items[_dna];
        itemSKU = itemFound.sku;
        itemADN = itemFound.dna;
        ownerID = itemFound.ownerID;
        originAluminumProducerID = itemFound.originAluminumProducerID;
        originAluminumProducerName = itemFound.originAluminumProducerName;
        originAluminumProducerInformation = itemFound.originAluminumProducerInformation;
        originAluminumProducerLatitude = itemFound.originAluminumProducerLatitude;
        originAluminumProducerLongitude = itemFound.originAluminumProducerLongitude;
        productNotes = itemFound.productNotes;
        itemState = itemFound.itemState;

        return 
        (
            itemSKU,
            itemADN,
            ownerID,
            originAluminumProducerID,
            originAluminumProducerName,
            originAluminumProducerInformation,
            originAluminumProducerLatitude,
            originAluminumProducerLongitude,
            productNotes,
            itemState
        );
    }

    // Define a function 'fetchItemBufferForManufacturer' that fetches data only for manufacturer
    function fetchItemBufferForManufacturer(uint _dna) public checkDnaInItems (_dna) view returns
    (
        uint    itemSKU,
        uint    itemADN,
        address ownerID,
        address originAluminumProducerID,
        string  memory originAluminumProducerName,
        string  memory productNotes,
        address distributorID,
        State    itemState
    )
    {
        // Assign values to the parameters
        Item memory itemFound = items[_dna];
        itemSKU = itemFound.sku;
        itemADN = itemFound.dna;
        ownerID = itemFound.ownerID;
        originAluminumProducerID = itemFound.originAluminumProducerID;
        originAluminumProducerName = itemFound.originAluminumProducerName;
        productNotes = itemFound.productNotes;
        distributorID = itemFound.distributorID;
        itemState = itemFound.itemState;

        return 
        (
            itemSKU,
            itemADN,
            ownerID,
            originAluminumProducerID,
            originAluminumProducerName,
            productNotes,
            distributorID,
            itemState
        );
    }
}
