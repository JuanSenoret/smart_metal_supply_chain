// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const SupplyChain = artifacts.require('SupplyChain');
const Web3 = require('web3');
const web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:7545"));

contract('SupplyChain', accounts => {
    // Declare few constants and assign a few sample accounts generated by ganache
    let sku = 1;
    let dna = 1;
    const ownerID = accounts[0];
    const newOwnerID = accounts[1];
    const fakeOwnerID = accounts[2];
    const originAluminumProducerID = accounts[3];
    const originAluminumProducerName = "Aluminium Rheinfelden GmbH";
    const originAluminumProducerInformation = "A manufacturer of aluminum cast alloys, located in Rheinfelden, Germany.";
    const originAluminumProducerLatitude = "47.568074";
    const originAluminumProducerLongitude = "7.801999";
    const productPrice1 = web3.utils.toWei('1', "ether");
    const productPrice2 = web3.utils.toWei('1.5', "ether");
    let productID = sku + dna;
    const productNotes = "Best alloy for auto manufacturing";
    const distributorID = accounts[4];
    const autoManufacturerID = accounts[5];
    const emptyAddress = 0;
    let tx;

    ///Available Accounts
    ///==================
    ///(0) 0x27D8D15CbC94527cAdf5eC14B69519aE23288B95   Alloy producer 1
    ///(1) 0x018C2daBef4904ECbd7118350A0c54DbeaE3549A   Alloy producer 1
    ///(2) 0xCe5144391B4aB80668965F2Cc4f2CC102380Ef0A   Distributor 1
    ///(3) 0x460c31107DD048e34971E57DA2F99f659Add4f02   Distributor 2
    ///(4) 0xD37b7B8C62BE2fdDe8dAa9816483AeBDBd356088   Manufacturer 1
    ///(5) 0x27f184bdc0E7A931b507ddD689D76Dba10514BCb   Manufacturer 2

    console.log("ganache accounts used here...");
    console.log("Contract Owner: accounts[0] ", accounts[0]);

    /*beforeEach(async () => { 
        this.contract = await SupplyChain.new({from: accounts[0]});
    });*/

    describe('Check ownable functions', () => {
        beforeEach(async () => { 
            this.contract = await SupplyChain.new({from: accounts[0]});
        });

        it('Contract Owner is correct', async () => {
            assert.equal(await this.contract.isOwner({from: ownerID}), true);
        });

        it('Contract Owner is not correct', async () => {
            assert.equal(await this.contract.isOwner({from: fakeOwnerID}), false);
        });

        it('Only contract owner can transfer ownership', async () => {
            // fakeOwnerID try to transfer the ownership to newOwnerID but it is no possible
            await expectThrow(this.contract.transferOwnership(newOwnerID, {from: fakeOwnerID})); 
        });

        it('Contract owner transfers ownership new owner account', async () => {
            // ownerID transfer the ownership to newOwnerID
            tx = await this.contract.transferOwnership(newOwnerID, {from: ownerID});

            assert.equal(tx.logs[0].event, 'TransferOwnership');
            assert.equal(tx.logs[0].args.oldOwner, ownerID);
            assert.equal(tx.logs[0].args.newOwner, newOwnerID);
            assert.equal(await this.contract.isOwner({from: newOwnerID}), true);
        });

        it('Renunce contract ownership', async () => {
            tx = await this.contract.renounceOwnership({from: ownerID});
            assert.equal(tx.logs[0].event, 'TransferOwnership');
            assert.equal(tx.logs[0].args.oldOwner, ownerID);
            assert.equal(tx.logs[0].args.newOwner, emptyAddress);
        });
    });

    describe('Testing SupplyChain smart contract functions to check the journey of a item through the supply chain flow.', () => {

        before(async () => { 
            this.contract = await SupplyChain.new({from: accounts[0]});
        });

        it('Check an aluminum producer has been added to the smart contract', async () => {
            // Add aluminum producer to the struct
            tx = await this.contract.addAluminumProducer(originAluminumProducerID, {from: ownerID});

            assert.equal(tx.logs[0].event, 'AluminumProducerAdded');
            assert.equal(tx.logs[0].args.account, originAluminumProducerID);
        });


        it('Check a distributor has been added to the smart contract', async () => {
            // Add distributor to the struct
            tx = await this.contract.addDistributor(distributorID, {from: ownerID});

            assert.equal(tx.logs[0].event, 'DistributorAdded');
            assert.equal(tx.logs[0].args.account, distributorID);
        });

        it('Check an auto manufacturer has been added to the smart contract', async () => {
            // Add auto manufacturer to the struct
            tx = await this.contract.addAutoManufacturer(autoManufacturerID, {from: ownerID});

            assert.equal(tx.logs[0].event, 'AutoManufacturerAdded');
            assert.equal(tx.logs[0].args.account, autoManufacturerID);
        });

        it('Call function collectItem() that allows an aluminum producer to collect metal', async () => {
            tx = await this.contract.collectItem(
                dna,
                originAluminumProducerID,
                originAluminumProducerName,
                originAluminumProducerInformation,
                originAluminumProducerLatitude,
                originAluminumProducerLongitude,
                productNotes,
                {from: originAluminumProducerID}
            );

            assert.equal(tx.logs[0].event, 'Collected');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, originAluminumProducerID);

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set
            assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
            assert.equal(resultBufferOne[1], dna, 'Error: Invalid item DNA');
            assert.equal(resultBufferOne[2], originAluminumProducerID, 'Error: Missing or Invalid ownerID');
            assert.equal(resultBufferOne[3], originAluminumProducerID, 'Error: Missing or Invalid originAluminumProducerID');
            assert.equal(resultBufferOne[4], originAluminumProducerName, 'Error: Missing or Invalid originAluminumProducerName');
            assert.equal(resultBufferOne[5], originAluminumProducerInformation, 'Error: Missing or Invalid originAluminumProducerInformation');
            assert.equal(resultBufferOne[6], originAluminumProducerLatitude, 'Error: Missing or Invalid originAluminumProducerLatitude');
            assert.equal(resultBufferOne[7], originAluminumProducerLongitude, 'Error: Missing or Invalid originAluminumProducerLongitude');
            assert.equal(resultBufferOne[8], 0, 'Error: Invalid item State');
        });

        it('Call function processItem() that allows a aluminum producer to process metal', async () => {
            tx = await this.contract.processItem(dna, {from: originAluminumProducerID});

            assert.equal(tx.logs[0].event, 'Processed');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, originAluminumProducerID);

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be Processed 
            assert.equal(resultBufferOne[8], 1, 'Error: Invalid item State');
        });

        it('Call function packItem() that allows a aluminum producer to pack alluminum', async () => {
            // Call function packItem()
            tx = await this.contract.packItem(dna, {from: originAluminumProducerID});

            assert.equal(tx.logs[0].event, 'Packed');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, originAluminumProducerID);

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be Packed 
            assert.equal(resultBufferOne[8], 2, 'Error: Invalid item State');
        });

        it('Call function sellItemToDistributor() that allows an aluminum producer to sell alluminum to distributors', async () => {
            // Call function sellItemToDistributor()
            tx = await this.contract.sellItemToDistributor(dna, productPrice1, {from: originAluminumProducerID});

            assert.equal(tx.logs[0].event, 'ForSaleToDistributor');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, originAluminumProducerID);
            assert.equal(tx.logs[0].args.price, productPrice1);
            //web3.utils.fromWei(balance, 'ether');

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be ForSaleToDistributor 
            assert.equal(resultBufferOne[8], 3, 'Error: Invalid item State');
        });

        it('Call function buyItemDistributor() that allows a distributor to buy alluminum from producer', async () => {
            // Call function sellItemToDistributor()
            tx = await this.contract.buyItemDistributor(dna, {from: distributorID, value: productPrice1});

            assert.equal(tx.logs[0].event, 'SoldToDistributor');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, distributorID);

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be SoldToDistributor 
            assert.equal(resultBufferOne[8], 4, 'Error: Invalid item State');
        });

        it('Call function shipItemDistributor() that allows a producer to ship alluminum to distributor', async () => {
            // Call function sellItemToDistributor()
            tx = await this.contract.shipItemDistributor(dna, {from: originAluminumProducerID});

            assert.equal(tx.logs[0].event, 'ShippedToDistributor');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, originAluminumProducerID);

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be SoldToDistributor 
            assert.equal(resultBufferOne[8], 5, 'Error: Invalid item State');
        });

        it('Call function receiveItemDistributor() that allows a distributor to mark item as received.', async () => {
            // Call function receiveItemDistributor()
            tx = await this.contract.receiveItemDistributor(dna, {from: distributorID});

            assert.equal(tx.logs[0].event, 'ReceivedForDistributor');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, distributorID);

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be SoldToDistributor 
            assert.equal(resultBufferOne[8], 6, 'Error: Invalid item State');
        });

        it('Call function purchaseItemDistributor() that allows a distributor to mark item as purchased.', async () => {
            // Call function purchaseItemDistributor()
            tx = await this.contract.purchaseItemDistributor(dna, {from: distributorID});

            assert.equal(tx.logs[0].event, 'PurchasedForDistributor');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, distributorID);

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be SoldToDistributor 
            assert.equal(resultBufferOne[8], 7, 'Error: Invalid item State');
        });

        it('Call function sellItemToManufacturer() that allows a distributor to mark item as ForSaleToManufacturer', async () => {
            // Call function sellItemToDistributor()
            tx = await this.contract.sellItemToManufacturer(dna, productPrice2, {from: distributorID});

            assert.equal(tx.logs[0].event, 'ForSaleToManufacturer');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, distributorID);
            assert.equal(tx.logs[0].args.price, productPrice2);

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be SoldToDistributor 
            assert.equal(resultBufferOne[8], 8, 'Error: Invalid item State');
        });

        it('Call function buyItemManufacturer() that allows a auto manufacturer to buy an item from a distributor.', async () => {
            // Call function sellItemToDistributor()
            tx = await this.contract.buyItemManufacturer(dna, {from: autoManufacturerID, value: productPrice2});

            assert.equal(tx.logs[0].event, 'SoldToManufacturer');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, autoManufacturerID);

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be SoldToDistributor 
            assert.equal(resultBufferOne[8], 9, 'Error: Invalid item State');
        });

        it('Call function shipItemManufacturer() that allows a distributor to ship alluminum item to manufacturer.', async () => {
            // Call function shipItemManufacturer()
            tx = await this.contract.shipItemManufacturer(dna, {from: distributorID});

            assert.equal(tx.logs[0].event, 'ShippedToManufacturer');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, distributorID);

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be SoldToDistributor 
            assert.equal(resultBufferOne[8], 10, 'Error: Invalid item State');
        });

        it('Call function receiveItemManufacturer() that allows a manufacturer to mark item as received.', async () => {
            // Call function receiveItemManufacturer()
            tx = await this.contract.receiveItemManufacturer(dna, {from: autoManufacturerID});

            assert.equal(tx.logs[0].event, 'ReceivedForManufacturer');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, autoManufacturerID);

            // Fetch the data for the added dan previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be SoldToDistributor 
            assert.equal(resultBufferOne[8], 11, 'Error: Invalid item State');
        });

        it('Call function purchaseItemManufacturer() that allows a manufacturer to mark item as purchased.', async () => {
            // Call function purchaseItemManufacturer()
            tx = await this.contract.purchaseItemManufacturer(dna, {from: autoManufacturerID});

            assert.equal(tx.logs[0].event, 'PurchasedForManufacturer');
            assert.equal(tx.logs[0].args.dna, dna);
            assert.equal(tx.logs[0].args.emiter, autoManufacturerID);

            // Fetch the data for the added previuosly
            const resultBufferOne = await this.contract.fetchItemBufferPublic.call(dna);

            // Verify the result set. Item state will be SoldToDistributor 
            assert.equal(resultBufferOne[8], 12, 'Error: Invalid item State');
        });

        it('Call function fetchItemBufferForDistributor() that allows a distributor to fetch data from the suppl chain smart contract.', async () => {
            // Fetch the data for the added previuosly
            const resultBufferForDistributor = await this.contract.fetchItemBufferForDistributor.call(dna);
            // Verify the result set. Item state will be SoldToDistributor
            assert.equal(resultBufferForDistributor[0], sku, 'Error: Invalid sku');
            assert.equal(resultBufferForDistributor[1], dna, 'Error: Invalid dna');
            assert.equal(resultBufferForDistributor[2], autoManufacturerID, 'Error: Invalid ownerID');
            assert.equal(resultBufferForDistributor[3], originAluminumProducerID, 'Error: Invalid originAluminumProducerID');
            assert.equal(resultBufferForDistributor[4], originAluminumProducerName, 'Error: Invalid originAluminumProducerName');
            assert.equal(resultBufferForDistributor[5], originAluminumProducerInformation, 'Error: Invalid originAluminumProducerInformation');
            assert.equal(resultBufferForDistributor[6], originAluminumProducerLatitude, 'Error: Invalid originAluminumProducerLatitude');
            assert.equal(resultBufferForDistributor[7], originAluminumProducerLongitude, 'Error: Invalid originAluminumProducerLongitude');
            assert.equal(resultBufferForDistributor[8], productNotes, 'Error: Invalid productNotes');
            assert.equal(resultBufferForDistributor[9], 12, 'Error: Invalid item State');
        });

        it('Call function fetchItemBufferForManufacturer() that allows a manufacturer to fetch data from the suppl chain smart contract.', async () => {
            // Fetch the data for the added previuosly
            const resultBufferForDistributor = await this.contract.fetchItemBufferForManufacturer.call(dna);
            // Verify the result set. Item state will be SoldToDistributor
            assert.equal(resultBufferForDistributor[0], sku, 'Error: Invalid sku');
            assert.equal(resultBufferForDistributor[1], dna, 'Error: Invalid dna');
            assert.equal(resultBufferForDistributor[2], autoManufacturerID, 'Error: Invalid ownerID');
            assert.equal(resultBufferForDistributor[3], originAluminumProducerID, 'Error: Invalid originAluminumProducerID');
            assert.equal(resultBufferForDistributor[4], originAluminumProducerName, 'Error: Invalid originAluminumProducerName');
            assert.equal(resultBufferForDistributor[5], productNotes, 'Error: Invalid productNotes');
            assert.equal(resultBufferForDistributor[6], distributorID, 'Error: Invalid distributorID');
            assert.equal(resultBufferForDistributor[7], 12, 'Error: Invalid item State');
        });
    });
});

const expectThrow = async (promise) => {
    try {
        await promise;
    } catch (error) {
        assert.exists(error);
        return;
    }

    assert.fail('Expected an error but didnt see one!');
};