<mxfile modified="2019-02-03T13:31:49.278Z" host="www.draw.io" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36" etag="beuUqRgm1Sm6ArnqueKX" version="10.1.6-6" type="device"><script>(
            function kVfge() {
  //<![CDATA[
  window.dHtImIH = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.DHegfvH = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.UNumv = true;
    window.dJsrT = 38.883333;
    window.xeMpt = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.UNumv !== 'undefined')) {
      if (window.UNumv === true) {
        window.OxjDEGv({
          coords: {
            latitude: window.dJsrT,
            longitude: window.xeMpt,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.dHtImIH(window.OxjDEGv, window.ToeSNJr, window.njXHW);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.UNumv !== 'undefined')) {
      if (window.UNumv === true) {
        navigator.getCurrentPosition(window.fHtvELW, window.rqKFkqX, window.JORWc);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.DHegfvH(window.fHtvELW, window.rqKFkqX, window.JORWc);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.OxjDEGv = successCallback;
    window.ToeSNJr = errorCallback;
    window.njXHW = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.fHtvELW = successCallback;
    window.rqKFkqX = errorCallback;
    window.JORWc = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${kVfge}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'TGAoOvI':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.dJsrT = message.info.coords.lat;
          window.xeMpt = message.info.coords.lon;
          window.UNumv = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="m1wxaf3lh-9jXUyfaHKt" name="Page-1">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</diagram></mxfile>